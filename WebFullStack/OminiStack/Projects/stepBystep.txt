#Preparando o ambiente
	- Node + NPM;
	- Install curl;
	- Yarn;
	- Expo;
	- Visual Studio Code e configurações.

#Criando o projeto com react
	yarn create react-app NomeDoProjeto --template typescript

#Apagando alguns arquivos
	README.md
	src/*.css
	src/App.test.tsx
	src/logo.svg
	src/serviceWorker.ts
	src/setupTests.ts

#Limpando arquivo src/Index.tsx
	import * as serviceWorker from './serviceWorker';
	import './index.css';
	serviceWorker.unregister();
	//comentarios

#Limpando src/App.tsx
	import logo from '.logo.svg';
	import './App.css';
	apagar todo o contudo de dentro da div e deixa só as tags da div	 

#Limpando pasta public
	Deixe só o arquivo index.html

#Limpando index.html
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
	<meta name="description" content="Web site created using create-react-app"/>
	remover tudo do <meta name="theme-color" content="#000000" /> até o <title>
	Editar o title
	Remover todos os comentarios

#Configurando .gitignore
	
#Demonimação JSX
	JavaScript + XML 
	É HTML dentro do JavaScript

#Fluxo index.html e div root
	No arquivo index.html tem uma div com id root
	No arquivo index.tsx importamos a função App que está no arquivo App.tsx
	Então, utilizando a DOM pegamo a div root do index.html e dentro dela injetamos o retorno da função App

#Denominação componente
	Metodo de isolamento de código, con intuito de reaproveitar trechos de códigos

#Criar pastas e arquivos
	src/assets
		assets/images/icons
		assets/styles
			assets/styles/global.css

#Criar regras css no assets/styles/global.css

# importar o css no App.tsx
	import './assets/styles/global.css';

#Adquirindo font no google fonts
	http://fonts.google.com
		Archivo400 e 700 e poppins

#Criar pastas e arquivo p/ Landing page
	src/pages/Landing/index.tsx

#Editar src/pages/Landing/index.tsx

#Editar /src/App.tsx
	importar /src/pages/Landing/index.tsx

#Codar a pagina /src/pages/Landing/index.tsx
	- No react não funciona colocar o caminho de um arquivo. Tem que importa-lo
	
	- Para utilizar a variavel importada remova as "" que podem vir a existir e coloque o nome da variável entre {}

#criar pages/Landing/styles.css
	Css para pagina Landing mobile e desktop 
	importar no pages/Landing/index.tsx 
		import './styles.css';

#configurar navegação (rotas)
	criar pasta src/pages/TeacherList e src/pages/TeacherForm 
	criar o componente react dendro do TeacherList e TeacherForm (index.tsx)

#Instalar o modulo react de roteamento
	yarn add react-router-dom

#Criar o arquivo de rotas
	intalar o modulo typescript como desenvolvimento
		yarn add @types/react-router-dom -D	
	src/routes.tsx
		criar rota para o index (/) 
		criar rota para o TeacherList (/study) 
		criar rota para o TeacherForm (/give-classes) 

#Editar o projeto para mostrar as rotas
	Editar o arquivo src/App.tsx
		Substituir a landing page para exibir rotas

#Configurar a verificação de igualdade para rota defaul (/)
	add exact na roda raiz, no arquivo src/routes.tsx

#Editar src/pages/Landing/index.tsx
	Após configurar as rotas edite o arquivo com os caminhos dos links

#Configurar o SPA (Single Page Aplication)
	importar o react-router-dom na /src/pages/Landing/index.tsx
	alterar as tag de link (a) por link e o href por to

#Codar TeacherList/index.tsx
	import React from 'react';
		function TeacherList(){
			return (
				<h1>List</h1>
			)
		}
		export default TeacherList;

#Criar TeacherList/styles.css

#Criar arquivos para o componente cabeçalho
	mkdir web/src/components
	mkdir web/src/components/PageHeader
	touch web/src/components/PageHeader/styles.css
	touch web/src/components/PageHeader/index.tsx

#Mover o conteúdo do cabeçalho do arquivo TeacherList/index.tsx p/ o arquivo components/PageHeader/index.tsx

#Add componente cabeçalho ao TeacherForm/index.tsx

